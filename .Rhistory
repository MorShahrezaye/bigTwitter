counter <- counter+1
setTxtProgressBar(pb, counter)
}
results
current
results[[id]] <- c(results[[id]], unlist(current_list$ids))
RESPONSE$cursor <- RESPONSE$cursor+1
!grepl('"ids\":[]', current)
!grepl('"ids\":\\[\\]', current)
ids
source("R/shared.R")
auth_df <- read.keys("/mnt/nvme0/Dropbox/USG/research/corona/python/keys.csv")
ids = c("1009054456778981376", "378780881545998336", "1256288574313553922", "1250091976487317507"); sleepTime = 1; verbose = T
require(itertools)
require(utils)
options(scipen=999)
if(is.null(ids))
stop("A list of Tweet ids are required.")
iterKeys <- itertools::recycle(t(auth_df), 10^6)
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
url <- "https://api.twitter.com/1.1/statuses/retweeters/ids.json"
pb <- utils::txtProgressBar(min = 0, max = length(ids), style = 3)
counter <- 0
results <- list()
for(id in ids){
if(verbose)
message("\nstarting ", id)
RESPONSE <- list(cursor = -1)
results[id] = c()
while(RESPONSE$cursor != "-2"){
q <- c(id=id, count=100, cursor=RESPONSE$cursor)
if(verbose)
message("cursor at ", RESPONSE["cursor"])
continue <- TRUE
while(continue){
current <- twitter_api_call(url, q, auth)
if(grepl("Rate limit exceeded", current)){
if(verbose)
message("Rate limit exceeded. Sleeping for ", sleepTime, " seconds")
Sys.sleep(sleepTime)
if(verbose)
message("Activating next key.... ")
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
} else {
continue <- FALSE
}
if(grepl("Sorry, that page does not exist.|Not authorized", current)){
if(verbose)
message(current)
continue <- -1
RESPONSE$max_id <- "0"
break
}
}
if(current!="[]" & !grepl('"ids\":\\[\\]', current)){
if(!continue<0){
current_list <- RJSONIO::fromJSON(current)
results[[id]] <- c(results[[id]], unlist(current_list$ids))
RESPONSE$cursor <- RESPONSE$cursor+1
}
} else {
RESPONSE$cursor <- "-2"
}
}
if(verbose){
if(continue<0){
message("failed ", user, "\n")
} else {
message("finished ", user, "\n")
}
}
counter <- counter+1
setTxtProgressBar(pb, counter)
}
require(itertools)
require(utils)
options(scipen=999)
if(is.null(ids))
stop("A list of Tweet ids are required.")
iterKeys <- itertools::recycle(t(auth_df), 10^6)
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
url <- "https://api.twitter.com/1.1/statuses/retweeters/ids.json"
pb <- utils::txtProgressBar(min = 0, max = length(ids), style = 3)
counter <- 0
results <- list()
for(id in ids){
if(verbose)
message("\nstarting ", id)
RESPONSE <- list(cursor = -1)
results[id] = c()
while(RESPONSE$cursor != "-2"){
q <- c(id=id, count=100, cursor=RESPONSE$cursor)
if(verbose)
message("cursor at ", RESPONSE["cursor"])
continue <- TRUE
while(continue){
current <- twitter_api_call(url, q, auth)
if(grepl("Rate limit exceeded", current)){
if(verbose)
message("Rate limit exceeded. Sleeping for ", sleepTime, " seconds")
Sys.sleep(sleepTime)
if(verbose)
message("Activating next key.... ")
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
} else {
continue <- FALSE
}
if(grepl("Sorry, that page does not exist.|Not authorized", current)){
if(verbose)
message(current)
continue <- -1
RESPONSE$max_id <- "0"
break
}
}
if(current!="[]" & !grepl('"ids\":\\[\\]', current)){
if(!continue<0){
current_list <- RJSONIO::fromJSON(current)
results[[id]] <- c(results[[id]], unlist(current_list$ids))
RESPONSE$cursor <- RESPONSE$cursor+1
}
} else {
RESPONSE$cursor <- "-2"
}
}
if(verbose){
if(continue<0){
message("failed ", id, "\n")
} else {
message("finished ", id, "\n")
}
}
counter <- counter+1
setTxtProgressBar(pb, counter)
}
current
q
results[[id]]
length(unique(results[[id]]))
q
RESPONSE$cursor=4
RESPONSE
q <- c(id=id, count=100, cursor=RESPONSE$cursor)
q
q <- c(id=id, count=100, cursor=RESPONSE$cursor)
if(verbose)
message("cursor at ", RESPONSE["cursor"])
continue <- TRUE
while(continue){
current <- twitter_api_call(url, q, auth)
if(grepl("Rate limit exceeded", current)){
if(verbose)
message("Rate limit exceeded. Sleeping for ", sleepTime, " seconds")
Sys.sleep(sleepTime)
if(verbose)
message("Activating next key.... ")
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
} else {
continue <- FALSE
}
if(grepl("Sorry, that page does not exist.|Not authorized", current)){
if(verbose)
message(current)
continue <- -1
RESPONSE$max_id <- "0"
break
}
}
current
q
current <- twitter_api_call(url, q, auth)
current
id="1248609184767078405"
results[id] = c()
while(RESPONSE$cursor != "-2"){
q <- c(id=id, count=100, cursor=RESPONSE$cursor)
if(verbose)
message("cursor at ", RESPONSE["cursor"])
continue <- TRUE
while(continue){
current <- twitter_api_call(url, q, auth)
if(grepl("Rate limit exceeded", current)){
if(verbose)
message("Rate limit exceeded. Sleeping for ", sleepTime, " seconds")
Sys.sleep(sleepTime)
if(verbose)
message("Activating next key.... ")
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
} else {
continue <- FALSE
}
if(grepl("Sorry, that page does not exist.|Not authorized", current)){
if(verbose)
message(current)
continue <- -1
RESPONSE$max_id <- "0"
break
}
}
if(current!="[]" & !grepl('"ids\":\\[\\]', current)){
if(!continue<0){
current_list <- RJSONIO::fromJSON(current)
results[[id]] <- c(results[[id]], unlist(current_list$ids))
RESPONSE$cursor <- RESPONSE$cursor+1
}
} else {
RESPONSE$cursor <- "-2"
}
}
current_list
results <- list()
for(id in ids){
if(verbose)
message("\nstarting ", id)
RESPONSE <- list(cursor = -1)
results[id] = c()
while(RESPONSE$cursor != "-2" & RESPONSE$cursor != "0"){
q <- c(id=id, count=100, cursor=RESPONSE$cursor)
if(verbose)
message("cursor at ", RESPONSE["cursor"])
continue <- TRUE
while(continue){
current <- twitter_api_call(url, q, auth)
if(grepl("Rate limit exceeded", current)){
if(verbose)
message("Rate limit exceeded. Sleeping for ", sleepTime, " seconds")
Sys.sleep(sleepTime)
if(verbose)
message("Activating next key.... ")
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
} else {
continue <- FALSE
}
if(grepl("Sorry, that page does not exist.|Not authorized", current)){
if(verbose)
message(current)
continue <- -1
RESPONSE$max_id <- "0"
break
}
}
if(current!="[]" & !grepl('"ids\":\\[\\]', current)){
if(!continue<0){
current_list <- RJSONIO::fromJSON(current)
results[[id]] <- c(results[[id]], unlist(current_list$ids))
RESPONSE$cursor <- current_list$next_cursor_str
}
} else {
RESPONSE$cursor <- "-2"
}
}
if(verbose){
if(continue<0){
message("failed ", id, "\n")
} else {
message("finished ", id, "\n")
}
}
counter <- counter+1
setTxtProgressBar(pb, counter)
}
pb <- utils::txtProgressBar(min = 0, max = length(ids), style = 3)
counter <- 0
results <- list()
for(id in ids){
if(verbose)
message("\nstarting ", id)
RESPONSE <- list(cursor = -1)
results[id] = c()
while(RESPONSE$cursor != "-2" & RESPONSE$cursor != "0"){
q <- c(id=id, count=100, cursor=RESPONSE$cursor)
if(verbose)
message("cursor at ", RESPONSE["cursor"])
continue <- TRUE
while(continue){
current <- twitter_api_call(url, q, auth)
if(grepl("Rate limit exceeded", current)){
if(verbose)
message("Rate limit exceeded. Sleeping for ", sleepTime, " seconds")
Sys.sleep(sleepTime)
if(verbose)
message("Activating next key.... ")
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
} else {
continue <- FALSE
}
if(grepl("Sorry, that page does not exist.|Not authorized", current)){
if(verbose)
message(current)
continue <- -1
RESPONSE$max_id <- "0"
break
}
}
if(current!="[]" & !grepl('"ids\":\\[\\]', current)){
if(!continue<0){
current_list <- RJSONIO::fromJSON(current)
results[[id]] <- c(results[[id]], unlist(current_list$ids))
RESPONSE$cursor <- current_list$next_cursor_str
}
} else {
RESPONSE$cursor <- "-2"
}
}
if(verbose){
if(continue<0){
message("failed ", id, "\n")
} else {
message("finished ", id, "\n")
}
}
counter <- counter+1
setTxtProgressBar(pb, counter)
}
results
id="1257650279740301314"
results[id] = c()
RESPONSE <- list(cursor = -1)
results[id] = c()
while(RESPONSE$cursor != "-2" & RESPONSE$cursor != "0"){
q <- c(id=id, count=100, cursor=RESPONSE$cursor)
if(verbose)
message("cursor at ", RESPONSE["cursor"])
continue <- TRUE
while(continue){
current <- twitter_api_call(url, q, auth)
if(grepl("Rate limit exceeded", current)){
if(verbose)
message("Rate limit exceeded. Sleeping for ", sleepTime, " seconds")
Sys.sleep(sleepTime)
if(verbose)
message("Activating next key.... ")
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
} else {
continue <- FALSE
}
if(grepl("Sorry, that page does not exist.|Not authorized", current)){
if(verbose)
message(current)
continue <- -1
RESPONSE$max_id <- "0"
break
}
}
if(current!="[]" & !grepl('"ids\":\\[\\]', current)){
if(!continue<0){
current_list <- RJSONIO::fromJSON(current)
results[[id]] <- c(results[[id]], unlist(current_list$ids))
RESPONSE$cursor <- current_list$next_cursor_str
}
} else {
RESPONSE$cursor <- "-2"
}
}
results
results
devtools::inst()
devtools::inst()
devtools::install()
source("R/shared.R")
auth_df <- read.keys("/mnt/nvme0/Dropbox/USG/research/corona/python/keys.csv")
screen_name_list <- c("stbrandner")
include_entities = T ;sleepTime = 1; verbose = T; user_id_list = NULL; jsonpath = "./"
require(itertools)
require(utils)
options(scipen=999)
if(is.null(screen_name_list) & is.null(user_id_list))
stop("Either of screen_name_list or user_id_list parameter should be set.")
if(is.null(screen_name_list)){
items <- user_id_list
use_screen_name <- F
} else {
items <- screen_name_list
use_screen_name <- T
}
if(include_entities){
it <- 'true'
}else{
it <- 'false'
}
iterKeys <- itertools::recycle(t(auth_df), 10^6)
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
url <- "https://api.twitter.com/1.1/statuses/user_timeline.json"
pb <- utils::txtProgressBar(min = 0, max = length(items), style = 3)
counter <- 0
results <- list()
user=items[1]
if(verbose)
message("\nstarting ", user)
if(use_screen_name){
q <- c(screen_name=user, include_entities=it, count=200, include_rts="true");
} else {
q <- c(user_id=user, include_entities=it, count=200, include_rts="true");
}
RESPONSE <- list(max_id = "-1")
while(RESPONSE$max_id != "0"){
# q["cursor"] <- RESPONSE$next_cursor_str
if(verbose)
message("cursor at ", RESPONSE["max_id"])
continue <- TRUE
while(continue){
current <- twitter_api_call(url, q, auth)
if(grepl("Rate limit exceeded", current)){
if(verbose)
message("Rate limit exceeded. Sleeping for ", sleepTime, " seconds")
Sys.sleep(sleepTime)
if(verbose)
message("Activating next key.... ")
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
} else {
continue <- FALSE
}
if(grepl("Sorry, that page does not exist.|Not authorized", current)){
if(verbose)
message(current)
continue <- -1
RESPONSE$max_id <- "0"
break
}
}
if(current!="[]"){
if(!continue<0){
TRY <- try({
current_list <- RJSONIO::fromJSON(iconv(current, "latin1", "ASCII", "byte"))
nextID <- min(unlist(lapply(current_list, function(x) x$id)))
}, silent = TRUE)
if(class(TRY)=="try-error"){
nextID = min(stringr::str_extract(stringr::str_extract_all(current, '[^"retweeted_status":]\\{\"created_at\".*?,\"id_str\"')[[1]], '(?<=id\":).*?(?=,\"id_str\")'))
}
write(current, paste0(jsonpath, "/", user,"_",nextID,".json"))
if(is.na(q["max_id"])) q["max_id"]<- "1"
if(q["max_id"]==nextID){
RESPONSE$max_id <- "0"
} else {
q["max_id"] <- nextID
RESPONSE$max_id <- nextID
}
}
} else {
RESPONSE$max_id <- "0"
}
}
write(current, paste0(jsonpath, "/", user,"_",nextID,".json"))
current
write(toJSON(current), paste0(jsonpath, "/", user,"_",nextID,".json"))
writeLines(toJSON(current), paste0(jsonpath, "/", user,"_",nextID,".json"))
current
sink(paste0(jsonpath, "/", user,"_",nextID,".json"))
cat(current)
sink()
write(iconv(current, "latin1", "ASCII", "byte"), paste0(jsonpath, "/", user,"_",nextID,".json"))
saveRDS(current, paste0(jsonpath, "/", user,"_",nextID,".rds"))
devtools::install()
source("R/shared.R")
auth_df <- read.keys("/mnt/nvme0/Dropbox/USG/research/corona/python/keys.csv")
ids = c("1219545223593975809", "1220793070477881345", "1221022394179080192", "1221081288251039746", "1221139383761457153"); sleepTime = 1; verbose = T
require(itertools)
require(utils)
options(scipen=999)
if(is.null(ids))
stop("ids should be set.")
items <- ids
items <- split(items, ceiling(seq_along(items)/100))
iterKeys <- itertools::recycle(t(auth_df), 10^6)
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
url <- "https://api.twitter.com/1.1/statuses/lookup.json"
pb <- utils::txtProgressBar(min = 0, max = length(items), style = 3)
counter <- 0
results <- list()
for(tweet in items){}
if(verbose)
message("starting next batch")
ids_str <- paste0(tweet, collapse = ",")
q <- c(id=ids_str, include_entities="true", map="true")
continue <- TRUE
while(continue){
current <- twitter_api_call(url, q, auth)
if(grepl("Rate limit exceeded|code\":32,\"message\":\"Could not authenticate you.", current)){
if(verbose)
message("Rate limit exceeded. Sleeping for ", sleepTime, " seconds")
Sys.sleep(sleepTime)
if(verbose)
message("Activating next key.... ")
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
} else {
continue <- FALSE
}
if(grepl("Sorry, that page does not exist.|Not authorized", current)){
if(verbose)
message(current)
continue <- -1
break
}
}
current
as.character(as.numeric(Sys.time()))
as.numeric(Sys.time())
saveRDS(current, paste0(jsonpath, "/", as.numeric(Sys.time()),".rds"))
devtools::install()
