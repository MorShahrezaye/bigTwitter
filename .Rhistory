devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()`
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
require(utils)
pb <- utils::txtProgressBar(min = 0, max = length(items), style = 3)
user_id_list <- c("813286","11522502", "19397942", "39364684", "15439395", "5876652","19923638", "22930185", "15808647", "5392522")
devtools::document()
devtools::install()
source('~/Documents/rTwitterPackage/bigTwitter/R/shared.R')
#read the keys file
auth_df <- read.keys("/home/morry/StGallenNetwork/keys.csv")
require(itertools)
require(iterators)
require(utils)
options(scipen=999)
devtools::document()
utils::URLencode("a url with spaces and / and @"))
utils::URLencode("a url with spaces and / and @")
utils::URLencode("a url with MÃ¼nchen and / and @")
source('~/Documents/rTwitterPackage/bigTwitter/R/shared.R')
auth_df <- read.keys("/home/morry/Documents/BEER/keys.csv")
screen_name_list = NULL; user_id_list = NULL; auth_df; sleepTime = 1; max_per_user = 15000; verbose = F; jsonPath = NULL
queryUser <- c("Heineken", "Heineken_UK", "Heineken_SA", "Heineken_US", "heineken_jp", "heinekenbr",
"Heineken_NG", "Heineken_IE", "Heineken_ES", "Heineken_col", "Heineken_MX",
"Heineken_NL", "Heineken_IT", "HeinekenPR", "Heineken_AR", "HeinekenCA")
screen_name_list <-queryUser
require(itertools)
require(iterators)
require(utils)
options(scipen=999)
if(is.null(screen_name_list) & is.null(user_id_list))
stop("Either of screen_name_list or user_id_list parameter should be set.")
if(is.null(screen_name_list)){
items <- user_id_list
use_screen_name <- F
} else {
items <- screen_name_list
use_screen_name <- T
}
iterKeys <- itertools::recycle(t(auth_df), 10^6)
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
url <- "https://api.twitter.com/1.1/followers/ids.json"
pb <- utils::txtProgressBar(min = 0, max = length(items), style = 3)
counter <- 0
results <- list()
user=items(1)
user=items[1]
if(verbose)
message("starting ", user)
if(use_screen_name){
q <- c(cursor=-1, screen_name=user, count=5000);
} else {
q <- c(cursor=-1, user_id=user, count=5000);
}
RESPONSE <- list(response = NULL, next_cursor_str = "-1")
while(RESPONSE$next_cursor_str != "0" & (length(RESPONSE$response)+1)<=max_per_user){
q["cursor"] <- RESPONSE$next_cursor_str
if(verbose)
message("cursor at ", q["cursor"])
continue <- TRUE
while(continue){
current <- twitter_api_call(url, q, auth)
if(grepl("Rate limit exceeded", current)){
if(verbose)
message("Rate limit exceeded. Sleeping for ", sleepTime, " seconds")
Sys.sleep(sleepTime)
if(verbose)
message("Activating next key.... ")
key <- iterators::nextElem(iterKeys)
auth <- key2auth(key)
} else {
continue <- FALSE
}
if(grepl("Sorry, that page does not exist.|Not authorized", current)){
if(verbose)
message(current)
continue <- -1
RESPONSE$next_cursor_str <- "0"
break
}
}
if(!continue<0){
current <- RJSONIO::fromJSON(current)
RESPONSE$response <- c(RESPONSE$response, as.character(current$ids))
RESPONSE$next_cursor_str <- as.character(current$next_cursor)
}
}
jsonPath="/home/morry/Documents/BEER/DATA/FOLLOWERS/"
!is.null(jsonPath)
list(RESPONSE$response)
RESPONSE$response
writeLines(RESPONSE$response, paste0(jsonPath, "/", "item"))
writeLines(as.character(RESPONSE$response), paste0(jsonPath, "/", item))
writeLines(as.character(RESPONSE$response), paste0(jsonPath, "/", user))
writeLines(rjson::toJSON(as.character(RESPONSE$response), paste0(jsonPath, "/", user)))
writeLines(rjson::toJSON(as.character(RESPONSE$response), paste0(jsonPath, "/", user)))
as.character(RESPONSE$response)
writeLines(rjson::toJSON(as.character(RESPONSE$response)), paste0(jsonPath, "/", user))
writeLines(rjson::toJSON(list(user = as.character(RESPONSE$response))), paste0(jsonPath, "/", user))
list(user = as.character(RESPONSE$response))
l <- list(as.character(RESPONSE$response))
names(l)
names(l) <- user
names(l)
writeLines(rjson::toJSON(l), paste0(jsonPath, "/", user))
writeLines(rjson::toJSON(l), paste0(jsonPath, "/", user, ".json"))
check_if_exist=T
source('~/Documents/rTwitterPackage/bigTwitter/R/getNetworks.R')
source('~/Documents/rTwitterPackage/bigTwitter/R/getNetworks.R')
source('~/Documents/rTwitterPackage/bigTwitter/R/getNetworks.R')
source('~/Documents/rTwitterPackage/bigTwitter/R/getNetworks.R')
jsonPath
getFollowerIDs(screen_name_list = queryUser, auth_df = auth_df, sleepTime = 1, verbose = T,
jsonPath = "/home/morry/Documents/BEER/DATA/FOLLOWERS/", check_if_exist = T, max_per_user = 10^10)
getFollowerIDs(screen_name_list = queryUser, auth_df = auth_df, sleepTime = 1, verbose = T,
jsonPath = "/home/morry/Documents/BEER/DATA/FOLLOWERS/", check_if_exist = T, max_per_user = 10^10)
source('~/Documents/rTwitterPackage/bigTwitter/R/getNetworks.R')
getFollowerIDs(screen_name_list = queryUser, auth_df = auth_df, sleepTime = 1, verbose = T,
jsonPath = "/home/morry/Documents/BEER/DATA/FOLLOWERS/", check_if_exist = T, max_per_user = 10^10)
getFollowerIDs(screen_name_list = queryUser, auth_df = auth_df, sleepTime = 1, verbose = T,
jsonPath = "/home/morry/Documents/BEER/DATA/FOLLOWERS/", check_if_exist = F, max_per_user = 10^10)
source('~/Documents/rTwitterPackage/bigTwitter/R/getNetworks.R')
getFollowerIDs(screen_name_list = queryUser, auth_df = auth_df, sleepTime = 1, verbose = T,
jsonPath = "/home/morry/Documents/BEER/DATA/FOLLOWERS/", max_per_user = 10^10)
getFollowerIDs(screen_name_list = queryUser, auth_df = auth_df, sleepTime = 1, verbose = T, max_per_user = 10^10)
devtools::document()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
